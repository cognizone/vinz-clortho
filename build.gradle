buildscript {
  ext {
    commonsIoVersion = "2.11.0"
    commonsLang3Version = "3.12.0"
    httpclientVersion = "4.5.13"
    jsr305Version = "3.0.2"
    junitVersion = "5.9.2"
    assertJVersion = "3.24.2"
    mockitoVersion = "5.3.1"
  }
}

plugins {
  id 'pl.allegro.tech.build.axion-release' version '1.13.3'
  id 'org.springframework.boot' version '3.1.5' apply false
  id 'io.spring.dependency-management' version '1.1.3'
  id 'idea'
  id 'java'
  id 'java-library'
  id 'maven-publish'
  id "io.freefair.lombok" version "6.5.1"
}

repositories {
  mavenLocal()
  mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

scmVersion {
  tag {
    prefix = "v"
    versionSeparator = ""
    branchPrefix = [
            'release/.*': 'release-v',
            'hotfix/.*' : 'hotfix-v'
    ]
  }
  nextVersion {
    suffix = "SNAPSHOT"
    separator = "-"
  }
}

idea {
  project {
    jdkName = "17"
    languageLevel = "17"
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: "io.freefair.lombok"
  apply plugin: 'io.spring.dependency-management'
  apply plugin: "maven-publish"
  apply plugin: 'signing'

  group = 'zone.cogni.lib.vinz-clortho'
  project.version = scmVersion.version
  


  repositories {
    if (project.hasProperty('jenkins-ci')) {
      maven {
        url "${System.properties['nexus.url']}/repository/cognizone-group"
        credentials {
          username = System.properties['nexus.username']
          password = System.properties['nexus.password']
        }
        allowInsecureProtocol(true)
      }
    }
    mavenLocal()
    mavenCentral()
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://repo.spring.io/milestone" }
  }

  dependencyManagement {
    imports {
      mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
    dependencies {
      dependency("javax.inject:javax.inject:1")
      dependency("com.google.code.findbugs:jsr305:${jsr305Version}")
      dependency("commons-io:commons-io:${commonsIoVersion}")
      dependency("org.apache.commons:commons-lang3:${commonsLang3Version}")
      dependency("org.apache.httpcomponents:httpclient:${httpclientVersion}")

      dependency("org.junit.jupiter:junit-jupiter:${junitVersion}")
      dependency("org.assertj:assertj-core:${assertJVersion}")
      dependency("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    }
  }

  dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
  }

  jar {
    from("${projectDir}") {
      include 'LICENSE'
      into '/'
    }
    from("${projectDir}") {
      include 'LICENSE'
      into 'META-INF'
    }
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }




  tasks.named('test') {
    useJUnitPlatform()
  }



  publishing {
    publications {
      mavenJava(MavenPublication) {
        groupId = group
        version = scmVersion.version
        from components.java
        pom {
          name = "${project.name}"
          packaging = 'jar'
          // optionally artifactId can be defined here
          description = 'A lightweight replacement for Zuul when using spring boot 2.7+'
          url = 'https://github.com/cognizone/vinz-clortho'

          scm {
            connection = 'scm:git:git@https://github.com/cognizone/vinz-clortho.git'
            developerConnection = 'scm:git:git@github.com:cognizone/vinz-clortho.git'
            url = 'https://github.com/cognizone/vinz-clortho'
          }

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id = 'cognizone'
              name = 'Cognizone'
              email = 'cognizone-lib-dev@cogni.zone'
            }
          }
        }
      }
    }
    repositories {
      if (project.hasProperty("publishToCognizoneNexus")) {
        maven {
          credentials {
            username = System.properties['nexus.username']
            password = System.properties['nexus.password']
          }
          def releasesRepoUrl = "${System.properties['nexus.url']}/repository/cognizone-release"
          def snapshotsRepoUrl = "${System.properties['nexus.url']}/repository/cognizone-snapshot"
          url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
          allowInsecureProtocol(true)
        }
      }
      if (project.hasProperty("publishToMavenCentral")) {
        maven {
          credentials {
            username = System.properties['ossrh.username']
            password = System.properties['ossrh.password']
          }
          // We cannot directly release to Maven Central, we first need to publish on staging repo
          // then manually release through the UI in https://s01.oss.sonatype.org/ (login with JIRA)
          def stagingRepoUrl = "${System.properties['ossrh.url']}/service/local/staging/deploy/maven2"
          def snapshotsRepoUrl = "${System.properties['ossrh.url']}/content/repositories/snapshots"
          url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : stagingRepoUrl
        }
      }

    }
  }
  signing {
    if (project.hasProperty("publishToMavenCentral")) {
      sign publishing.publications.mavenJava
    }
  }

  tasks.withType(Javadoc) {
    failOnError false
  }



}


project("vinz-clortho") {
  dependencies {
    implementation("javax.inject:javax.inject:1") //if we don't have this dependency the publication build does not work???
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation "com.google.code.findbugs:jsr305"
    implementation "commons-io:commons-io"
    implementation "org.apache.commons:commons-lang3"
    implementation "org.apache.httpcomponents:httpclient"

    //test
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("javax.inject:javax.inject")
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.mockito:mockito-junit-jupiter")
  }
}
